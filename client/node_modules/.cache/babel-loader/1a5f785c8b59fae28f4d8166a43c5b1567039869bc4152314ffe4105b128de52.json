{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bcrypt = require('bcryptjs');\nconst sqlite3 = require('sqlite3');\nconst {\n  open\n} = require('sqlite');\nconst app = express();\nconst PORT = 3001;\napp.use(cors());\napp.use(express.json());\n\n// Открываем соединение с базой данных\nconst dbPromise = open({\n  filename: './users.db',\n  driver: sqlite3.Database\n});\n\n// Функция для инициализации базы данных\nasync function initializeDb() {\n  const db = await dbPromise;\n  await db.exec('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)');\n}\n\n// Инициализируем базу данных при старте сервера\ninitializeDb().catch(console.error);\napp.get('/', (req, res) => {\n  res.json({\n    message: \"Hello world\"\n  });\n});\n\n// Маршрут для регистрации\napp.post('/register', async (req, res) => {\n  try {\n    const {\n      username,\n      password\n    } = req.body;\n    if (!username || !password) {\n      return res.status(400).send('Username and password are required');\n    }\n    const db = await dbPromise;\n    const existingUser = await db.get('SELECT * FROM users WHERE username = ?', username);\n    if (existingUser) {\n      return res.status(409).send('User already exists');\n    }\n    const hashedPassword = await bcrypt.hash(password, 8);\n    await db.run('INSERT INTO users (username, password) VALUES (?, ?)', username, hashedPassword);\n    res.status(201).send('User registered successfully');\n  } catch (error) {\n    res.status(500).send('Error registering user');\n  }\n});\napp.listen(PORT, () => {\n  console.log(`Listening to http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","bcrypt","sqlite3","open","app","PORT","use","json","dbPromise","filename","driver","Database","initializeDb","db","exec","catch","console","error","get","req","res","message","post","username","password","body","status","send","existingUser","hashedPassword","hash","run","listen","log"],"sources":["C:/Users/Bogdan/Documents/GitHub/RIP/client/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst cors = require('cors');\r\nconst bcrypt = require('bcryptjs');\r\nconst sqlite3 = require('sqlite3');\r\nconst { open } = require('sqlite');\r\n\r\nconst app = express();\r\nconst PORT = 3001;\r\n\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Открываем соединение с базой данных\r\nconst dbPromise = open({\r\n    filename: './users.db',\r\n    driver: sqlite3.Database\r\n});\r\n\r\n// Функция для инициализации базы данных\r\nasync function initializeDb() {\r\n    const db = await dbPromise;\r\n    await db.exec('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, username TEXT, password TEXT)');\r\n}\r\n\r\n// Инициализируем базу данных при старте сервера\r\ninitializeDb().catch(console.error);\r\n\r\napp.get('/', (req, res) => {\r\n    res.json({ message: \"Hello world\" });\r\n});\r\n\r\n// Маршрут для регистрации\r\napp.post('/register', async (req, res) => {\r\n    try {\r\n        const { username, password } = req.body;\r\n        if (!username || !password) {\r\n            return res.status(400).send('Username and password are required');\r\n        }\r\n\r\n        const db = await dbPromise;\r\n        const existingUser = await db.get('SELECT * FROM users WHERE username = ?', username);\r\n\r\n        if (existingUser) {\r\n            return res.status(409).send('User already exists');\r\n        }\r\n\r\n        const hashedPassword = await bcrypt.hash(password, 8);\r\n        await db.run('INSERT INTO users (username, password) VALUES (?, ?)', username, hashedPassword);\r\n\r\n        res.status(201).send('User registered successfully');\r\n    } catch (error) {\r\n        res.status(500).send('Error registering user');\r\n    }\r\n});\r\n\r\napp.listen(PORT, () => {\r\n    console.log(`Listening to http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEI;AAAK,CAAC,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAElC,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;AACfI,GAAG,CAACE,GAAG,CAACR,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA,MAAMC,SAAS,GAAGL,IAAI,CAAC;EACnBM,QAAQ,EAAE,YAAY;EACtBC,MAAM,EAAER,OAAO,CAACS;AACpB,CAAC,CAAC;;AAEF;AACA,eAAeC,YAAYA,CAAA,EAAG;EAC1B,MAAMC,EAAE,GAAG,MAAML,SAAS;EAC1B,MAAMK,EAAE,CAACC,IAAI,CAAC,yFAAyF,CAAC;AAC5G;;AAEA;AACAF,YAAY,CAAC,CAAC,CAACG,KAAK,CAACC,OAAO,CAACC,KAAK,CAAC;AAEnCb,GAAG,CAACc,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EACvBA,GAAG,CAACb,IAAI,CAAC;IAAEc,OAAO,EAAE;EAAc,CAAC,CAAC;AACxC,CAAC,CAAC;;AAEF;AACAjB,GAAG,CAACkB,IAAI,CAAC,WAAW,EAAE,OAAOH,GAAG,EAAEC,GAAG,KAAK;EACtC,IAAI;IACA,MAAM;MAAEG,QAAQ;MAAEC;IAAS,CAAC,GAAGL,GAAG,CAACM,IAAI;IACvC,IAAI,CAACF,QAAQ,IAAI,CAACC,QAAQ,EAAE;MACxB,OAAOJ,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,oCAAoC,CAAC;IACrE;IAEA,MAAMd,EAAE,GAAG,MAAML,SAAS;IAC1B,MAAMoB,YAAY,GAAG,MAAMf,EAAE,CAACK,GAAG,CAAC,wCAAwC,EAAEK,QAAQ,CAAC;IAErF,IAAIK,YAAY,EAAE;MACd,OAAOR,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;IACtD;IAEA,MAAME,cAAc,GAAG,MAAM5B,MAAM,CAAC6B,IAAI,CAACN,QAAQ,EAAE,CAAC,CAAC;IACrD,MAAMX,EAAE,CAACkB,GAAG,CAAC,sDAAsD,EAAER,QAAQ,EAAEM,cAAc,CAAC;IAE9FT,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,8BAA8B,CAAC;EACxD,CAAC,CAAC,OAAOV,KAAK,EAAE;IACZG,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC,wBAAwB,CAAC;EAClD;AACJ,CAAC,CAAC;AAEFvB,GAAG,CAAC4B,MAAM,CAAC3B,IAAI,EAAE,MAAM;EACnBW,OAAO,CAACiB,GAAG,CAAE,iCAAgC5B,IAAK,EAAC,CAAC;AACxD,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}